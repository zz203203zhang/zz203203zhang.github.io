<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Shell</title>
    <url>/2019/11/12/Shell/</url>
    <content><![CDATA[<p>[本文作者：dudebing99  链接: <a href="https://dudebing99.github.io/Blog/shell.html]" target="_blank" rel="noopener">https://dudebing99.github.io/Blog/shell.html]</a></p>
<hr>
<h2 id="统计网络连接状态及数目"><a href="#统计网络连接状态及数目" class="headerlink" title="统计网络连接状态及数目"></a>统计网络连接状态及数目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat 工具</span></span><br><span class="line">netstat -n|awk <span class="string">'/^tcp/ &#123;++state[$NF]&#125; END &#123;for(i in state) print i, state[i]&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ss 工具(自动统计)</span></span><br><span class="line">ss -s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># netstat -n|awk '/^tcp/ &#123;++state[$NF]&#125; END &#123;for(i in state) print i, state[i]&#125;'</span></span><br><span class="line">ESTABLISHED 1</span><br><span class="line">[root@localhost ~]<span class="comment"># ss -s</span></span><br><span class="line">Total: 425 (kernel 442)</span><br><span class="line">TCP:   8 (estab 1, closed 0, orphaned 0, synrecv 0, timewait 0/0), ports 3</span><br><span class="line"></span><br><span class="line">Transport Total     IP        IPv6</span><br><span class="line">*         442       -         -        </span><br><span class="line">RAW       0         0         0        </span><br><span class="line">UDP       1         1         0        </span><br><span class="line">TCP       8         5         3        </span><br><span class="line">INET      9         6         3        </span><br><span class="line">FRAG      0         0         0</span><br></pre></td></tr></table></figure>

<h2 id="统计进程打开的文件句柄数目"><a href="#统计进程打开的文件句柄数目" class="headerlink" title="统计进程打开的文件句柄数目"></a>统计进程打开的文件句柄数目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -p PID</span><br><span class="line">lsof -p PID|wc -l</span><br></pre></td></tr></table></figure>

<h2 id="查看打开某个端口的进程"><a href="#查看打开某个端口的进程" class="headerlink" title="查看打开某个端口的进程"></a>查看打开某个端口的进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看打开端口 80 的进程</span></span><br><span class="line">lsof -i :80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># lsof -i :22</span></span><br><span class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">sshd    2159 root    3u  IPv4  14855      0t0  TCP *:ssh (LISTEN)</span><br><span class="line">sshd    2159 root    4u  IPv6  14865      0t0  TCP *:ssh (LISTEN)</span><br><span class="line">sshd    2381 root    3r  IPv4  15983      0t0  TCP localhost:ssh-&gt;192.168.2.1:61861 (ESTABLISHED)</span><br></pre></td></tr></table></figure>

<h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><blockquote>
<p>man bash 获取更全面的语法（<a href="http://www.gnu.org/software/bash/manual/bash.html" target="_blank" rel="noopener">在线手册</a>）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $&#123;parameter#word&#125; 最小限度从前面截取 word</span></span><br><span class="line">[root@localhost ~]<span class="comment"># str="http://www.bigsillybear.com/index.html"</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $&#123;str#*//&#125;</span></span><br><span class="line">www.bigsillybear.com/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;parameter##word&#125; 最大限度从前面截取 word</span></span><br><span class="line">[root@localhost ~]<span class="comment"># str="http://www.bigsillybear.com/index.html"</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $&#123;str##*/&#125;                             </span></span><br><span class="line">index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;parameter%word&#125; 最小限度从后面截取 word</span></span><br><span class="line">[root@localhost ~]<span class="comment"># str="http://www.bigsillybear.com/index.html"</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $&#123;str%/*&#125;</span></span><br><span class="line">http://www.bigsillybear.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;parameter%%word&#125; 最大限度从后面截取 word</span></span><br><span class="line">[root@localhost ~]<span class="comment"># str="http://www.bigsillybear.com/index.html"</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $&#123;str%%/*&#125;</span></span><br><span class="line">http:</span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;parameter:offset&#125; 从指定位置截取字</span></span><br><span class="line"><span class="comment"># $&#123;parameter:offset:length&#125; 从指定位置截取指定长度</span></span><br><span class="line">[root@localhost ~]<span class="comment"># str="http://www.bigsillybear.com/index.html"</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $&#123;str:7&#125;</span></span><br><span class="line">www.bigsillybear.com/index.html</span><br><span class="line">[root@localhost ~]<span class="comment"># echo $&#123;str:7:20&#125;                            </span></span><br><span class="line">www.bigsillybear.com</span><br><span class="line">[root@localhost ~]<span class="comment"># echo $&#123;str:0-10&#125;                            </span></span><br><span class="line">index.html</span><br><span class="line">[root@localhost ~]<span class="comment"># echo $&#123;str:0-10:5&#125;</span></span><br><span class="line">index</span><br></pre></td></tr></table></figure>

<h2 id="匹配、过滤、替换"><a href="#匹配、过滤、替换" class="headerlink" title="匹配、过滤、替换"></a>匹配、过滤、替换</h2><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印出从 1 到 10 之间的偶数</span></span><br><span class="line">seq 10|awk <span class="string">'&#123;getline; print $0&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出从 1 到 10 之前的奇数</span></span><br><span class="line">seq 10|awk <span class="string">'&#123;print $0; getline&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交换奇数、偶数行</span></span><br><span class="line">seq 10|awk <span class="string">'&#123;getline tmp; print tmp; print $0&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配指定行</span></span><br><span class="line">cat file|awk <span class="string">'/target/ &#123;print $0&#125;'</span></span><br></pre></td></tr></table></figure>

<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><blockquote>
<p><strong>Tips:</strong> </p>
<ol>
<li>‘*‘ 在 shell 中代表通配符，用来代表任意字符，但是在正则表达式中，其含义不同，代表有  0 个或多个某个字符（’*‘ 前面指定的字符）。例如  oo* 表示第一个 o 一定存在，第二个 o 可以有一个或多个，也可以没有，因此代表至少一个 0</li>
<li>shell 中的反向选择为 [!range]，正则里面为 [^range]</li>
</ol>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配指定行，并输出行号</span></span><br><span class="line">cat file|grep -n <span class="string">'target'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 未匹配上的所有行</span></span><br><span class="line">cat file|grep -v <span class="string">'target'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配 tast 或者 test</span></span><br><span class="line">cat file|grep <span class="string">'t[ae]st'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行首、行尾关键词匹配</span></span><br><span class="line">cat file|grep <span class="string">'^key'</span></span><br><span class="line">cat file|grep <span class="string">'key$'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以小写字母开头的行</span></span><br><span class="line">cat file|grep <span class="string">'^[a-z]'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配不是以英文字母开头的行</span></span><br><span class="line">grep <span class="string">'^[^a-zA-Z]'</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配非空行</span></span><br><span class="line">cat file|grep -v <span class="string">'^$'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grep 正则表达式中， '.' 代表任意一个字符，'*' 代表重复字符。</span></span><br><span class="line"><span class="comment"># 匹配 g??d，例如 good，gabd，goxd ……</span></span><br><span class="line">cat file|grep <span class="string">'g..d'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配两个 o 以上的字符串</span></span><br><span class="line">cat file|grep <span class="string">'ooo*'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以 g 开头和结尾，中间至少有一个 o 字符串</span></span><br><span class="line">cat file|grep <span class="string">'goo*g'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配以 g 开头和结尾的字符串，'.*' 代表 0 个或多个任意字符</span></span><br><span class="line">cat file|grep <span class="string">'g.*g'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配包含 2 个 o 的字符串的行</span></span><br><span class="line">cat file|grep <span class="string">'o\&#123;2\&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配包含 2~5 个 o 的字符串的行</span></span><br><span class="line">grep -n <span class="string">'o\&#123;2,5\&#125;'</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配包含 g 后面跟 2~3 个 o，再跟 d 的字符串的行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat file</span></span><br><span class="line">goood</span><br><span class="line">god</span><br><span class="line">good</span><br><span class="line">gooood</span><br><span class="line">[root@localhost ~]<span class="comment"># grep -n 'go\&#123;2,3\&#125;d' file </span></span><br><span class="line">1:goood</span><br><span class="line">3:good</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配包含 g 后面跟 2 个以上 o，再跟 d 的字符串的行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -n 'go\&#123;2,\&#125;d' file </span></span><br><span class="line">1:goood</span><br><span class="line">3:good</span><br><span class="line">4:gooood</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配多个条件，例如，去除空白行和以 '#' 开头的行</span></span><br><span class="line">cat file|grep -v <span class="string">'^$'</span>|grep -v <span class="string">'^#'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grep 扩展正则（grep -E 或 egrep）</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat file</span></span><br><span class="line">goood</span><br><span class="line">god</span><br><span class="line">good</span><br><span class="line">gooood</span><br><span class="line"></span><br><span class="line"><span class="comment"># '+'，匹配一个或多个重复字符</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat file|grep -E 'goo+d'</span></span><br><span class="line">goood</span><br><span class="line">good</span><br><span class="line">gooood</span><br><span class="line"></span><br><span class="line"><span class="comment"># '.'，匹配 0 个或 1 个字符</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat file|grep -E 'goo?d'</span></span><br><span class="line">god</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># '|'，匹配多个条件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat file|grep -E 'good|goood'</span></span><br><span class="line">goood</span><br><span class="line">good</span><br><span class="line"></span><br><span class="line"><span class="comment"># '()'，将部分内容合成一个单元组，如下分别匹配 0 个或 1 个 oo，匹配一个或多个 oo</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat file|grep -E 'g(oo)?d'</span></span><br><span class="line">good</span><br><span class="line">[root@localhost ~]<span class="comment"># cat file|grep -E 'g(oo)+d'</span></span><br><span class="line">good</span><br><span class="line">gooood</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出匹配行的上下行，如，匹配行的上 2 行，下 3 行</span></span><br><span class="line">[root@localhost ~]cat file|grep -B 2 -A 3 <span class="string">"target"</span></span><br><span class="line">it<span class="string">'s</span></span><br><span class="line"><span class="string">very</span></span><br><span class="line"><span class="string">target</span></span><br><span class="line"><span class="string">import</span></span><br><span class="line"><span class="string">to try</span></span><br><span class="line"><span class="string">hello</span></span><br></pre></td></tr></table></figure>

<h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><blockquote>
<p>[[:space:]] 表示空格或者 tab 的集合</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换文件中所有 \r</span></span><br><span class="line">sed -i <span class="string">'s/\r//g'</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有空行</span></span><br><span class="line">sed -i <span class="string">'/^$/d'</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除行首空格</span></span><br><span class="line">sed -i <span class="string">'s/^[ \t]*//g'</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除行末空格</span></span><br><span class="line">sed -i <span class="string">'s/[ \t]*$//g'</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有的空格</span></span><br><span class="line">sed -i <span class="string">'s/[[:space:]]//g'</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换第 3~5 行中的 第 2 个 hello 为 world</span></span><br><span class="line">sed -i <span class="string">'3,5s/hello/world/2'</span> file</span><br><span class="line"><span class="comment"># 替换所有的 hello 为 world</span></span><br><span class="line">sed -i <span class="string">'s/hello/world/g'</span></span><br></pre></td></tr></table></figure>

<h3 id="综合使用"><a href="#综合使用" class="headerlink" title="综合使用"></a>综合使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将当前目录下所有 env.conf 文件中 debug 替换为 release</span></span><br><span class="line">find . -name env.conf | xargs sed -i <span class="string">'s/debug/release/g'</span></span><br></pre></td></tr></table></figure>

<h2 id="求和、求平均值"><a href="#求和、求平均值" class="headerlink" title="求和、求平均值"></a>求和、求平均值</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@0c1d475c709b:/<span class="comment"># for((i=1;i&lt;=3;++i)) do echo $i; done</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">root@0c1d475c709b:/<span class="comment"># for((i=1;i&lt;=3;++i)) do echo $i; done|awk '&#123;sum+=$1&#125; END &#123;print "Sum = ", sum&#125;'</span></span><br><span class="line">Sum =  6</span><br><span class="line">root@0c1d475c709b:/<span class="comment"># for((i=1;i&lt;=3;++i)) do echo $i; done|awk '&#123;sum+=$1&#125; END &#123;print "Average = ", sum/NR&#125;'</span></span><br><span class="line">Average =  2</span><br></pre></td></tr></table></figure>

<h2 id="过滤空白行"><a href="#过滤空白行" class="headerlink" title="过滤空白行"></a>过滤空白行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 grep</span></span><br><span class="line">grep -v <span class="string">"^$"</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 tr</span></span><br><span class="line">cat file|tr -s <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 sed</span></span><br><span class="line">cat file|sed <span class="string">'/^$/d'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 awk</span></span><br><span class="line">cat file|awk <span class="string">'&#123;if($0 != "") print $0&#125;'</span></span><br><span class="line">cat file|awk <span class="string">'&#123;if(length != 0) print $0&#125;'</span></span><br></pre></td></tr></table></figure>

<h2 id="for-循环的常用写法"><a href="#for-循环的常用写法" class="headerlink" title="for 循环的常用写法"></a>for 循环的常用写法</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># i = i*3+1</span></span><br><span class="line"><span class="keyword">for</span>((i=1; i&lt;=10; i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> $(expr <span class="variable">$i</span> \*3 + 1)</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 10)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> $(expr <span class="variable">$i</span> \* 3 + 1);</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> $(expr <span class="variable">$i</span> \* 3 + 1);</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'BEGIN &#123;for(i=1; i&lt;=10; i++) print i&#125;'</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f1 f2 f3</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">list=<span class="string">"rootfs usr data"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$list</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="shell-数组与字典"><a href="#shell-数组与字典" class="headerlink" title="shell 数组与字典"></a>shell 数组与字典</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"shell 定义字典"</span></span><br><span class="line"><span class="built_in">declare</span> -A dic</span><br><span class="line">dic=([key1]=<span class="string">"value1"</span> [key2]=<span class="string">"value2"</span> [key3]=<span class="string">"value3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印指定 key 的 value</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;dic["key1"]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有key值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!dic[*]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有value</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;dic[*]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典添加一个新元素</span></span><br><span class="line">dic+=([key4]=<span class="string">"value4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历key值</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> $(<span class="built_in">echo</span> <span class="variable">$&#123;!dic[*]&#125;</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$key</span>, <span class="variable">$&#123;dic[$key]&#125;</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"shell 定义数组"</span></span><br><span class="line">list=(<span class="string">"value1"</span> <span class="string">"value2"</span> <span class="string">"value3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印指定下标</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list[1]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有下标</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!list[*]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印数组下标</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list[*]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组增加一个元素</span></span><br><span class="line">list=(<span class="string">"<span class="variable">$&#123;list[@]&#125;</span>"</span> <span class="string">"value3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按序号遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;!arr[@]&#125;</span>"</span>; <span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>, <span class="variable">$&#123;arr[$i]&#125;</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按数据遍历</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> <span class="variable">$&#123;ARR[*]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$v</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="shell-文件属性获取"><a href="#shell-文件属性获取" class="headerlink" title="shell 文件属性获取"></a>shell 文件属性获取</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-e (equal)</span><br><span class="line">-e filename, 判断文件是否存在</span><br><span class="line"> </span><br><span class="line">-d (directory)</span><br><span class="line">-d filename，判断文件是否为目录</span><br><span class="line"> </span><br><span class="line">-f (file)</span><br><span class="line">-f filename，判断文件是否为常规文件</span><br><span class="line"> </span><br><span class="line">-L (link)</span><br><span class="line">-L filename，判断文件是否问链接文件</span><br><span class="line"> </span><br><span class="line">-r (<span class="built_in">read</span>)</span><br><span class="line">-r filename，判断文件是否可读</span><br><span class="line"> </span><br><span class="line">-w (write)</span><br><span class="line">-w filename，判断文件是否可写</span><br><span class="line"> </span><br><span class="line">-x (<span class="built_in">exec</span>)</span><br><span class="line">-x filename,判断文件是否可执行</span><br><span class="line"> </span><br><span class="line">-s (size)</span><br><span class="line">-s filename，判断文件长度是否为0</span><br><span class="line"> </span><br><span class="line">-h (hard link)</span><br><span class="line">-h filename,判断文件是否为硬链接文件</span><br><span class="line"> </span><br><span class="line">-nt (newer than)</span><br><span class="line">filename1 -nt filename2，判断文件1是否比文件2新</span><br><span class="line"> </span><br><span class="line">-ot (older than)</span><br><span class="line">filename1 -ot filename2，判断文件1是否比文件2旧</span><br></pre></td></tr></table></figure>

<h2 id="分割、合并大文件"><a href="#分割、合并大文件" class="headerlink" title="分割、合并大文件"></a>分割、合并大文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照指定行数分割</span></span><br><span class="line">split -l 500 large_file.log new_file_prefix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照文件大小分割</span></span><br><span class="line">split -b 100m large_file.log new_file_prefix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 cat 进行文件合并</span></span><br><span class="line">cat new_file_prefix* &gt; large_file.log</span><br></pre></td></tr></table></figure>

<h2 id="检查-IPv4-地址合法性"><a href="#检查-IPv4-地址合法性" class="headerlink" title="检查 IPv4 地址合法性"></a>检查 IPv4 地址合法性</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CheckIPAddr()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"># IP地址必须为全数字</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span>|grep <span class="string">"^[0-9]\&#123;1,3\&#125;\.\([0-9]\&#123;1,3\&#125;\.\)\&#123;2\&#125;[0-9]\&#123;1,3\&#125;$"</span> &gt; /dev/null</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    ipaddr=<span class="variable">$1</span></span><br><span class="line">    a=`<span class="built_in">echo</span> <span class="variable">$ipaddr</span> | awk -F . <span class="string">'&#123;print $1&#125;'</span>`  <span class="comment"># 以"."分隔，取出每个列的值</span></span><br><span class="line">    b=`<span class="built_in">echo</span> <span class="variable">$ipaddr</span> | awk -F . <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">    c=`<span class="built_in">echo</span> <span class="variable">$ipaddr</span> | awk -F . <span class="string">'&#123;print $3&#125;'</span>`</span><br><span class="line">    d=`<span class="built_in">echo</span> <span class="variable">$ipaddr</span> | awk -F . <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="variable">$a</span> <span class="variable">$b</span> <span class="variable">$c</span> <span class="variable">$d</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$num</span> -gt 255 ] || [ <span class="variable">$num</span> -lt 0 ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">return</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">CheckIPAddr 192.168.1.1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"invalid"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h2 id="检查进程是否重启"><a href="#检查进程是否重启" class="headerlink" title="检查进程是否重启"></a>检查进程是否重启</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: [Process Name]"</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">PID=`ps afx|grep <span class="variable">$1</span>|grep -v <span class="string">"grep"</span>|grep -v <span class="string">"/bin/bash"</span>|head -n 1|awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ 1 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    PID2=`ps afx|grep <span class="variable">$1</span>|grep -v <span class="string">"grep"</span>|grep -v <span class="string">"/bin/bash"</span>|head -n 1|awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$PID2</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [ ! <span class="variable">$PID</span> ]; <span class="keyword">then</span></span><br><span class="line">            PID=<span class="variable">$PID2</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"PID: <span class="variable">$PID</span>"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> [ <span class="variable">$PID</span> -ne <span class="variable">$PID2</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Server is reboot, PID: <span class="variable">$PID</span> --&gt; <span class="variable">$PID2</span>"</span></span><br><span class="line">                PID=<span class="variable">$PID2</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Server is running, PID: <span class="variable">$PID2</span>"</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Server is not running"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    sleep 1</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="nohup-后台启动-java-进程"><a href="#nohup-后台启动-java-进程" class="headerlink" title="nohup 后台启动 java 进程"></a>nohup 后台启动 java 进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup java -classpath xxx_service_1.0.jar xxx_entry &gt; xxx_service.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h2 id="获取进程号、杀进程"><a href="#获取进程号、杀进程" class="headerlink" title="获取进程号、杀进程"></a>获取进程号、杀进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps afx|grep 进程名|grep -v grep|awk <span class="string">'&#123;print $1&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">pgrep 进程名|xargs <span class="built_in">kill</span> -9</span><br><span class="line">pidof 进程名|xargs <span class="built_in">kill</span> -9</span><br><span class="line">pkill -9 进程名</span><br><span class="line">killall -9 进程名</span><br></pre></td></tr></table></figure>

<h2 id="查询、启动、停止服务"><a href="#查询、启动、停止服务" class="headerlink" title="查询、启动、停止服务"></a>查询、启动、停止服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新管理方式，如 Cent OS &gt;= 7.x</span></span><br><span class="line">systemctl start/status/<span class="built_in">enable</span>/<span class="built_in">disable</span>/stop/restart xxx_service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 旧管理方式，如 Cent OS &lt; 7.x</span></span><br><span class="line">service xxx_service start/status/stop/restart</span><br></pre></td></tr></table></figure>

<h2 id="显示已经登录的用户、执行的命令"><a href="#显示已经登录的用户、执行的命令" class="headerlink" title="显示已经登录的用户、执行的命令"></a>显示已经登录的用户、执行的命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示已经登录的用户以及正在执行的命令</span></span><br><span class="line">w</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">&gt; w</span><br><span class="line"> 18:27:34 up 89 days,  6:41,  6 users,  load average: 0.46, 0.46, 0.34</span><br><span class="line">USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/1    172.13.30.133    14:30    3:56m  0.33s  0.33s -bash</span><br><span class="line">kevin    pts/2    172.13.30.219    Thu08   19:14   3.06s  3.06s -bash</span><br><span class="line">kevin    pts/5    172.13.30.219    17:48    0.00s  0.60s  0.01s w</span><br><span class="line">root     pts/6    172.13.30.219    18:09   17:10   0.04s  0.04s -bash</span><br><span class="line">kevin    pts/7    172.13.30.219    18:06   20:42   0.00s  0.00s -bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示已经登录的用户、登录的终端</span></span><br><span class="line">who</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">&gt; who</span><br><span class="line">root     pts/1        2018-03-27 14:30 (172.13.30.133)</span><br><span class="line">kevin    pts/2        2018-03-22 08:09 (172.13.30.219)</span><br><span class="line">root     pts/3        2018-03-27 14:31 (172.13.30.133)</span><br><span class="line">kevin    pts/5        2018-03-27 17:48 (172.13.30.219)</span><br><span class="line">root     pts/6        2018-03-27 18:09 (172.13.30.219)</span><br><span class="line">kevin    pts/7        2018-03-27 18:06 (172.13.30.219)</span><br></pre></td></tr></table></figure>

<h2 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h2><h3 id="at-定时任务"><a href="#at-定时任务" class="headerlink" title="at 定时任务"></a>at 定时任务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例：添加一个 1 分钟之后执行的任务，按 Ctrl + D 退出</span></span><br><span class="line">&gt; at now +1 minutes</span><br><span class="line">at&gt; <span class="built_in">echo</span> hello &gt; ~/at.log</span><br><span class="line">at&gt; &lt;EOT&gt;</span><br><span class="line">job 6 at 2018-03-27 19:20</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：查询所有 at 任务</span></span><br><span class="line">&gt; atq</span><br><span class="line">6       2018-03-27 19:20 a kevin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：删除 at 定时任务（6 位 job ID）</span></span><br><span class="line">&gt; atrm 6</span><br></pre></td></tr></table></figure>

<h3 id="crontab-定时任务"><a href="#crontab-定时任务" class="headerlink" title="crontab 定时任务"></a>crontab 定时任务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加定时任务</span></span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有 crontab 任务</span></span><br><span class="line">crontab -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR</span></span><br><span class="line"><span class="comment"># sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name command to be executed</span></span><br><span class="line"><span class="comment"># 每个小时第 05 分执行同步系统时间、硬件时钟</span></span><br><span class="line">05 */1 * * * rdate -t 30 -s time.nist.gov &amp;&amp; /usr/sbin/hwclock -w</span><br></pre></td></tr></table></figure>

<h2 id="watch-持续监视命令的执行情况"><a href="#watch-持续监视命令的执行情况" class="headerlink" title="watch 持续监视命令的执行情况"></a>watch 持续监视命令的执行情况</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每隔 3s，打印一次指定端口 9999 处于连接已建立的连接数目</span></span><br><span class="line">watch -n 3 <span class="string">'netstat -anp|grep 9999|wc -l'</span></span><br></pre></td></tr></table></figure>

<h2 id="TCP-UDP-收发数据、探测端口是否打开"><a href="#TCP-UDP-收发数据、探测端口是否打开" class="headerlink" title="TCP/UDP 收发数据、探测端口是否打开"></a>TCP/UDP 收发数据、探测端口是否打开</h2><h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听 1234</span></span><br><span class="line">nc -l 1234</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接 1234</span></span><br><span class="line">nc 127.0.0.1 1234</span><br></pre></td></tr></table></figure>

<h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet 127.0.0.1 1234</span><br></pre></td></tr></table></figure>

<h2 id="逐行读取文件"><a href="#逐行读取文件" class="headerlink" title="逐行读取文件"></a>逐行读取文件</h2><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> LINE</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$LINE</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="variable">$FILE</span></span><br></pre></td></tr></table></figure>

<h3 id="重定向法（管道法）"><a href="#重定向法（管道法）" class="headerlink" title="重定向法（管道法）"></a>重定向法（管道法）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat <span class="variable">$FILE</span>|<span class="keyword">while</span> <span class="built_in">read</span> LINE</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$LINE</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h3 id="文件描述符法"><a href="#文件描述符法" class="headerlink" title="文件描述符法"></a>文件描述符法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如下两个操作可合并</span></span><br><span class="line"><span class="comment"># exec 3&lt;&amp;0 exec 0&lt;$FILE</span></span><br><span class="line"><span class="built_in">exec</span> 3&lt;&amp;0</span><br><span class="line"><span class="built_in">exec</span> 0&lt;<span class="variable">$FILE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> LINE</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$LINE</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 0&lt;&amp;3</span><br></pre></td></tr></table></figure>

<h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> LINE <span class="keyword">in</span> `cat <span class="variable">$FILE</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$LINE</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="如何解决-Linux-Error-No-space-left-on-device"><a href="#如何解决-Linux-Error-No-space-left-on-device" class="headerlink" title="如何解决 Linux Error: No space left on device"></a>如何解决 Linux Error: No space left on device</h2><h3 id="判断磁盘空间是否满，inode-是否耗尽"><a href="#判断磁盘空间是否满，inode-是否耗尽" class="headerlink" title="判断磁盘空间是否满，inode 是否耗尽"></a>判断磁盘空间是否满，inode 是否耗尽</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line">df -i</span><br></pre></td></tr></table></figure>

<h3 id="查找大文件"><a href="#查找大文件" class="headerlink" title="查找大文件"></a>查找大文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照大小降序排列（取出前 10 个大文件）</span></span><br><span class="line">du -sh target.dir|sort -n|head</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找目录下大于 1M 且小于 10M 的文件</span></span><br><span class="line">find  target.dir -size +1M -size -10M -<span class="built_in">type</span> f -name <span class="string">"*.jpg"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定查询目录层级</span></span><br><span class="line">du -h --max-depth=1</span><br></pre></td></tr></table></figure>

<h3 id="查找访问某个目录的进程"><a href="#查找访问某个目录的进程" class="headerlink" title="查找访问某个目录的进程"></a>查找访问某个目录的进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof +d /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">&gt; lsof +d ~/Blog/</span><br><span class="line">COMMAND   PID  USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME</span><br><span class="line">bash     6936 kevin  cwd    DIR  253,2     4096 3675368 /home/kevin/Blog</span><br><span class="line">vim     24969 kevin  cwd    DIR  253,2     4096 3675368 /home/kevin/Blog</span><br><span class="line">vim     24969 kevin    4u   REG  253,2    20480 3675605 /home/kevin/Blog/.SHELL.md.swp</span><br></pre></td></tr></table></figure>

<h3 id="删除文件（少量）"><a href="#删除文件（少量）" class="headerlink" title="删除文件（少量）"></a>删除文件（少量）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /tmp -<span class="built_in">type</span> f -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：xargs 默认是以空白字符（空格，TAB，换行符）来分割记录的，如果文件名中间有空格，例如 /tmp/file 1.log，</span></span><br><span class="line"><span class="comment"># 此时自动被当做两个文件 /tmp/file 与 1.log，执行命令报错：No such file or directory</span></span><br><span class="line">find -name <span class="string">'*.log'</span> -print0|xargs -0 rm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能存在大小为 0 字节的空文件，同样也会占用 inode</span></span><br><span class="line">find /tmp -<span class="built_in">type</span> f -size 0 -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<h3 id="删除文件（大量）"><a href="#删除文件（大量）" class="headerlink" title="删除文件（大量）"></a>删除文件（大量）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先建立一个空目录</span></span><br><span class="line">mkdir /data/blank</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 rsync 删除目标目录</span></span><br><span class="line">rsync --delete-before -d /data/blank/ /tmp/</span><br></pre></td></tr></table></figure>

<h3 id="删除大文件"><a href="#删除大文件" class="headerlink" title="删除大文件"></a>删除大文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /dev/null &gt; target.file</span><br></pre></td></tr></table></figure>

<h2 id="查找指定范围内的日志信息"><a href="#查找指定范围内的日志信息" class="headerlink" title="查找指定范围内的日志信息"></a>查找指定范围内的日志信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找时间范围 2018/03/28 05:00:00 ~ 2018/03/28 07:59:59 的所有日志</span></span><br><span class="line">sed -n <span class="string">'#2018/03/28 05:[0-9][0-9]:[0-9][0-9]#,#2018/03/28 07:[0-9][0-9]:[0-9][0-9]#p'</span> <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找 2018-03-29 00:24:00 ~ 2018-03-29 00:25:59 的所有日志</span></span><br><span class="line">cat <span class="built_in">log</span>|grep  -E <span class="string">'2018-03-29 00:2[4-5]:[0-9][0-9]'</span></span><br></pre></td></tr></table></figure>

<h2 id="tr-字符进行替换、压缩和删除"><a href="#tr-字符进行替换、压缩和删除" class="headerlink" title="tr 字符进行替换、压缩和删除"></a>tr 字符进行替换、压缩和删除</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将输入字符由大写转换为小写</span></span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">"Hello World"</span>|tr <span class="string">'a-z'</span> <span class="string">'A-Z'</span></span><br><span class="line">HELLO WORLD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除字符</span></span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">"hello 123 world 456"</span>|tr -d <span class="string">'0-9'</span></span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将制表符转换为空格</span></span><br><span class="line">cat file|tr <span class="string">'\t'</span> <span class="string">' '</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将不在指定字符集合中的所有字符删除</span></span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">"aa.,a 1 b#<span class="variable">$bb</span> 2 c*/cc 3 ddd 4"</span>|tr -d -c <span class="string">'0-9 \n'</span></span><br><span class="line">1 2 3 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉重复的字符</span></span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">"hell   oooo wwwworld"</span>|tr -d <span class="string">' ow'</span></span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字相加操作</span></span><br><span class="line">&gt; seq 100|xargs -n1|<span class="built_in">echo</span> $[ $(tr <span class="string">'\n'</span> <span class="string">'+'</span>)0 ]</span><br><span class="line">5050</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出 mac 地址，去掉冒号，转换为大写</span></span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">"2018/03/29 16:00:22 bc:ec:29:39:d4:2f online"</span>|awk -F <span class="string">' '</span> <span class="string">'&#123;print $3&#125;'</span>|tr  <span class="string">'a-z'</span> <span class="string">'A-Z'</span>|tr -d <span class="string">':'</span></span><br><span class="line">BCEC2939D42F</span><br></pre></td></tr></table></figure>

<h2 id="编译、打包脚本"><a href="#编译、打包脚本" class="headerlink" title="编译、打包脚本"></a>编译、打包脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"usage: <span class="variable">$0</span> &lt;Ver&gt; &lt;Env&gt;"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  Option:"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"      Ver     consist of 4 parts, i.e. 1.0.1.0"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"      Env     [dev|test|prod]"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Return: 0, valid; 1, invalid</span></span><br><span class="line"><span class="function"><span class="title">check_env</span></span>() &#123;</span><br><span class="line">    envs=(<span class="string">'dev test prod'</span>)</span><br><span class="line">    <span class="keyword">for</span> env <span class="keyword">in</span> <span class="variable">$envs</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"<span class="variable">$env</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">return</span> 0;</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 2 ]; <span class="keyword">then</span></span><br><span class="line">    usage</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">check_env <span class="variable">$2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Option Env invalid, check again"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">    usage</span><br><span class="line">    <span class="built_in">exit</span> 1;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">VERSION=<span class="variable">$1</span></span><br><span class="line">ENV=<span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Version: <span class="variable">$VERSION</span>, Environment: <span class="variable">$ENV</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO] clean all ..."</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">find . -name cmake_install.cmake | xargs rm -rf</span><br><span class="line">find . -name CMakeFiles | xargs rm -rf</span><br><span class="line">find . -name CMakeCache.txt | xargs rm -rf</span><br><span class="line">find . -name Makefile | xargs rm -rf</span><br><span class="line"><span class="built_in">cd</span> - &gt; /dev/null</span><br><span class="line">ls -d * | grep -v make_release.sh | xargs rm -rf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO] compile all ..."</span></span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Release ..</span><br><span class="line">make -j4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO] packing all ..."</span></span><br><span class="line">PKGNAME=xxx_access_<span class="variable">$ENV</span>\_<span class="variable">$VERSION</span></span><br><span class="line">PKGACCESS=<span class="variable">$PKGNAME</span>/access</span><br><span class="line">PKGPROXY=<span class="variable">$PKGNAME</span>/proxy</span><br><span class="line">PKGLOGGER=<span class="variable">$PKGNAME</span>/logger</span><br><span class="line">mkdir -p <span class="variable">$PKGNAME</span> <span class="variable">$PKGLIB</span> <span class="variable">$PKGACCESS</span> <span class="variable">$PKGLOGGER</span> <span class="variable">$PKGPROXY</span></span><br><span class="line"></span><br><span class="line">cp -rP <span class="built_in">test</span>/access/test_access <span class="variable">$PKGACCESS</span>/access</span><br><span class="line">cp -rP ../<span class="built_in">test</span>/access/access_cmd.sh <span class="variable">$PKGACCESS</span>/remote_access_client.sh</span><br><span class="line">chmod +x <span class="variable">$PKGACCESS</span>/remote_access_client.sh</span><br><span class="line">cp -rP <span class="built_in">test</span>/logger_server/test_logger_server <span class="variable">$PKGLOGGER</span>/logger</span><br><span class="line">cp -rP <span class="built_in">test</span>/logger_server/test_logger_client <span class="variable">$PKGLOGGER</span>/client</span><br><span class="line">cp -rP <span class="built_in">test</span>/proxy/test_proxy <span class="variable">$PKGPROXY</span>/proxy</span><br><span class="line">cp -rP <span class="built_in">test</span>/proxy/test_client <span class="variable">$PKGPROXY</span>/client</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO] generating default configuration file"</span></span><br><span class="line">cat &gt; <span class="variable">$PKGACCESS</span>/default.conf.template &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"sub_topic"</span> : <span class="string">"<span class="variable">$ENV</span>-access"</span>,</span><br><span class="line">    <span class="string">"pub_topic"</span> : <span class="string">"<span class="variable">$ENV</span>-device_management_system"</span>,</span><br><span class="line">    <span class="string">"proxy_topic"</span> : <span class="string">"<span class="variable">$ENV</span>-proxy"</span>,</span><br><span class="line">    <span class="string">"kafka_brokers"</span> : <span class="string">"xxx.xxx.xxx.xxx:9092"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"oauth_server_addr"</span> : <span class="string">"xxx.xxx.xxx.xxx"</span>,</span><br><span class="line">    <span class="string">"oauth_server_port"</span> : 9006,</span><br><span class="line">    <span class="string">"oauth_username"</span> : <span class="string">"dbaccess"</span>,</span><br><span class="line">    <span class="string">"oauth_password"</span> : <span class="string">"123456"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"listen_addr"</span> : <span class="string">"xxx.xxx.xxx.xxx"</span>,</span><br><span class="line">    <span class="string">"listen_port"</span> : 10999,</span><br><span class="line">    <span class="string">"heartbeat_timeout"</span> : 60,</span><br><span class="line"></span><br><span class="line">    <span class="string">"http_listen_addr"</span> : <span class="string">"xxx.xxx.xxx.xxx"</span>,</span><br><span class="line">    <span class="string">"http_listen_port"</span> : 10086,</span><br><span class="line">    <span class="string">"http_username"</span> : <span class="string">"dbaccess"</span>,</span><br><span class="line">    <span class="string">"http_password"</span> : <span class="string">"123456"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"enable_debug"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"reserved"</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; <span class="variable">$PKGLOGGER</span>/default.conf.template &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"listen_port"</span> : 10998</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; <span class="variable">$PKGPROXY</span>/default.conf.template &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"sub_topic"</span> : <span class="string">"<span class="variable">$ENV</span>-proxy"</span>,</span><br><span class="line">    <span class="string">"kafka_brokers"</span> : <span class="string">"xxx.xxx.xxx.xxx:9092"</span>,</span><br><span class="line">    <span class="string">"listen_port"</span> : 12306,</span><br><span class="line">    <span class="string">"active_timeout"</span> : 15,</span><br><span class="line"></span><br><span class="line">    <span class="string">"loadbalance_type"</span>: 1,</span><br><span class="line">    <span class="string">"mac_rule"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"mac_set"</span>: [],</span><br><span class="line">            <span class="string">"mac_instance_set"</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"ip_rule"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"ip_set"</span>: [],</span><br><span class="line">            <span class="string">"ip_instance_set"</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO] generating version info ..."</span></span><br><span class="line">COMMITID=$(git rev-list -1 HEAD)</span><br><span class="line">cat &gt; VERSION &lt;&lt; EOF</span><br><span class="line">COMMIT ID: <span class="variable">$COMMITID</span></span><br><span class="line">VERSION  : <span class="variable">$VERSION</span></span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">for</span> dir <span class="keyword">in</span> $(find <span class="variable">$PKGNAME</span> -mindepth 1 -maxdepth 1 -<span class="built_in">type</span> d)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$dir</span></span><br><span class="line">    md5sum $(find . -<span class="built_in">type</span> f) &gt; /tmp/MD5SUM</span><br><span class="line">    mv /tmp/MD5SUM .</span><br><span class="line">    cp ../../VERSION .</span><br><span class="line">    <span class="built_in">cd</span> - &gt; /dev/null</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">rm -rf VERSION</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO] generating ChangeLog"</span></span><br><span class="line">cp ../ChangeLog <span class="variable">$PKGNAME</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO] generating INSTALL"</span></span><br><span class="line">cat &gt; INSTALL &lt;&lt; EOF</span><br><span class="line">===========================================================================</span><br><span class="line">1. 接入服务 access</span><br><span class="line"></span><br><span class="line">a. 修改配置文件</span><br><span class="line"></span><br><span class="line">b. 配置防火墙，vim /etc/sysconfig/iptables 加入一条（以端口号 10999 为例）</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 10999 -j ACCEPT</span><br><span class="line"></span><br><span class="line">c. 启动服务</span><br><span class="line">./access -d -w --conf default.conf</span><br><span class="line"></span><br><span class="line">===========================================================================</span><br><span class="line">2. 接入代理服务 proxy</span><br><span class="line"></span><br><span class="line">a. 修改配置文件</span><br><span class="line"></span><br><span class="line">b. 配置防火墙，vim /etc/sysconfig/iptables 加入一条（以端口号 12306 为例）</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 12306 -j ACCEPT</span><br><span class="line"></span><br><span class="line">c. 启动服务</span><br><span class="line">./proxy -d -w --conf default.conf</span><br><span class="line"></span><br><span class="line">===========================================================================</span><br><span class="line">3. 网关日志服务 logger</span><br><span class="line"></span><br><span class="line">a. 修改配置文件，最小配置只需要修改监听的端口号（listen_port）</span><br><span class="line">注意：由于中控插件上传日志时，作为 logger 的客户端，因此，监听的端口</span><br><span class="line">号需要与中控插件配置的日志服务器端口对应。</span><br><span class="line"></span><br><span class="line">b. 配置防火墙，vim /etc/sysconfig/iptables 加入一条（以端口号 10998 为例）</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 10998 -j ACCEPT</span><br><span class="line"></span><br><span class="line">c. 启动服务</span><br><span class="line">./logger -d -w --conf default.conf</span><br><span class="line">EOF</span><br><span class="line">cp -rP INSTALL <span class="variable">$PKGNAME</span></span><br><span class="line">rm -rf INSTALL</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO] generating README.md ..."</span></span><br><span class="line">cat &gt; README.md &lt;&lt; EOF</span><br><span class="line">===========================================================================</span><br><span class="line">[ACCESS]</span><br><span class="line">DESC:</span><br><span class="line">    xxx<span class="string">'s access service, connecting gateway and cloud.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">LIST:</span></span><br><span class="line"><span class="string">    access          xxx'</span>s access service</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">    ./access -h     show <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">ATTENTION:</span><br><span class="line">    Do not forget to config iptables or firewall<span class="string">'s in/out strategies in</span></span><br><span class="line"><span class="string">order to ensure the forwarding client can access the listening port.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">===========================================================================</span></span><br><span class="line"><span class="string">[PROXY]</span></span><br><span class="line"><span class="string">DESC:</span></span><br><span class="line"><span class="string">    xxx'</span>s access proxy service, assigning access service instances to</span><br><span class="line">gateway.</span><br><span class="line"></span><br><span class="line">LIST:</span><br><span class="line">    proxy           xxx<span class="string">'s access proxy service</span></span><br><span class="line"><span class="string">    client          fetch an access instance by sending a request</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    ./proxy -h      show help</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ATTENTION:</span></span><br><span class="line"><span class="string">    Do not forget to config iptables or firewall'</span>s <span class="keyword">in</span>/out strategies <span class="keyword">in</span></span><br><span class="line">order to ensure the forwarding client can access the listening port.</span><br><span class="line"></span><br><span class="line">===========================================================================</span><br><span class="line">[LOGGER]</span><br><span class="line">DESC:</span><br><span class="line">    xxx<span class="string">'s logger server for HuaWei gateway</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">LIST:</span></span><br><span class="line"><span class="string">    logger          xxx'</span>s logger server</span><br><span class="line">    client          <span class="built_in">test</span> logger server<span class="string">'s health by sending '</span>helloworld<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    ./logger -h     show help</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If logger is running, you can run client to test. For example, logger</span></span><br><span class="line"><span class="string">is running on host 192.168.1.1, listening on port 10998, run</span></span><br><span class="line"><span class="string">./client 192.168.1.1 10998 to test whether the logger service is working.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ATTENTION:</span></span><br><span class="line"><span class="string">    Do not forget to config iptables or firewall'</span>s <span class="keyword">in</span>/out strategies <span class="keyword">in</span></span><br><span class="line">order to ensure the forwarding client can access the listening port.</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cp -rP README.md <span class="variable">$PKGNAME</span></span><br><span class="line">rm -rf README.md</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO] archiving all ..."</span></span><br><span class="line">tar -czf <span class="variable">$PKGNAME</span>.tar.gz <span class="variable">$PKGNAME</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO] clean tmp files ..."</span></span><br><span class="line">ls -d * | grep -v <span class="string">"make_release.sh\|<span class="variable">$PKGNAME</span>.tar.gz"</span> | xargs rm -rf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO] =========================================="</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO]        Congratulations, all is done"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[INFO] =========================================="</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> $?</span><br></pre></td></tr></table></figure>

<h2 id="openssl-自签证书"><a href="#openssl-自签证书" class="headerlink" title="openssl 自签证书"></a>openssl 自签证书</h2><blockquote>
<p><strong>download:</strong> <a href="https://dudebing99.github.io/Blog/archives/script/ca.tar.gz" target="_blank" rel="noopener">自签证书</a></p>
</blockquote>
<h3 id="初始化-CA"><a href="#初始化-CA" class="headerlink" title="初始化 CA"></a>初始化 CA</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># name: init_ca.sh</span></span><br><span class="line"><span class="comment"># author: kevin</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m===============================================\e[0m"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33mFunction: construct your own private CA.\e[0m"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33mSupported OS: CentOS 6.8\e[0m"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m===============================================\e[0m"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check root permission</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$UID</span> -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;31m[Failed] superuser privileges are required\e[0m"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;32m[Passed] superuser privileges meeted\e[0m"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -e /etc/pki/CA/cacert.pem ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e -n <span class="string">"\e[1;31m[WARN] re-init CA? (Y/n)\e[0m"</span></span><br><span class="line">    <span class="keyword">while</span> [ 1 ]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">read</span> Confirm</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$Confirm</span>"</span>x = <span class="string">"Y"</span>x -o <span class="string">"<span class="variable">$Confirm</span>"</span>x = <span class="string">"y"</span>x ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] start to re-init CA\e[0m"</span></span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">elif</span> [ <span class="string">"<span class="variable">$Confirm</span>"</span>x = <span class="string">"n"</span>x ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> -e -n <span class="string">"\e[1;31m[ERROR] invalid option, re-init CA? (Y/n)\e[0m"</span></span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">OS=`cat /etc/redhat-release | awk <span class="string">'&#123;print $1 " " $3&#125;'</span>`</span><br><span class="line">SupportedOS=<span class="string">"CentOS 6.8"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$OS</span>"</span>x = <span class="string">"<span class="variable">$SupportedOS</span>"</span>x ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;32m[Passed] OS: <span class="variable">$OS</span>\e[0m"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;31m[Failed] <span class="variable">$SupportedOS</span> supported only\e[0m"</span></span><br><span class="line">    <span class="built_in">exit</span> 1;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install openssl</span></span><br><span class="line">Found=`openssl version | grep <span class="string">"command not found"</span>`</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$Found</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] openssl installed\e[0m"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] install openssl\e[0m"</span></span><br><span class="line">    yum install openssl -y &gt; /dev/null</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] generate CA's private key\e[0m"</span></span><br><span class="line">(<span class="built_in">umask</span> 077; openssl genrsa -out /etc/pki/CA/private/cakey.pem 2048)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] generate CACert\e[0m"</span></span><br><span class="line">cat &gt; gen_cert.exp &lt;&lt; EOF</span><br><span class="line"><span class="comment">#!/usr/bin/expect -f</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> timeout 30</span><br><span class="line"></span><br><span class="line">spawn openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -out \</span><br><span class="line">/etc/pki/CA/cacert.pem -days 3655</span><br><span class="line"></span><br><span class="line">expect &#123;</span><br><span class="line">    <span class="string">"Country Name (2 letter code)"</span> &#123;</span><br><span class="line">        send <span class="string">"cn\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"State or Province Name (full name)"</span> &#123;</span><br><span class="line">        send <span class="string">"Guang Dong\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"Locality Name (eg, city)"</span> &#123;</span><br><span class="line">        send <span class="string">"Shen Zhen\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"Organization Name (eg, company)"</span> &#123;</span><br><span class="line">        send <span class="string">"XXX Tech Ltd.\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"Organizational Unit Name (eg, section)"</span> &#123;</span><br><span class="line">        send <span class="string">"XXX's CA\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"Common Name (eg, your name or your server's hostname)"</span> &#123;</span><br><span class="line">        send <span class="string">"xxx.cn\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"Email Address"</span> &#123;</span><br><span class="line">        send <span class="string">"cloud@xxx.cn\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod +x gen_cert.exp</span><br><span class="line">./gen_cert.exp</span><br><span class="line">rm -rf gen_cert.exp</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] CACert's information in detail:\e[0m"</span></span><br><span class="line">openssl x509 -noout -text -<span class="keyword">in</span> /etc/pki/CA/cacert.pem</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] Verify CACert's invalidism\e[0m"</span></span><br><span class="line">openssl verify /etc/pki/CA/cacert.pem</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] init CA's serial\e[0m"</span></span><br><span class="line">touch /etc/pki/CA/&#123;index.txt,serial&#125;</span><br><span class="line"><span class="built_in">echo</span> 01 &gt; /etc/pki/CA/serial</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] Congratulations! Everything is done.\e[0m"</span></span><br></pre></td></tr></table></figure>

<h3 id="颁发证书"><a href="#颁发证书" class="headerlink" title="颁发证书"></a>颁发证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># name:  gen_cert.sh</span></span><br><span class="line"><span class="comment"># author: kevin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check root permission</span></span><br><span class="line"><span class="function"><span class="title">validate_superuser</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$UID</span> -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">"\e[1;31m[Failed] superuser privileges are required\e[0m"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">"\e[1;32m[Passed] superuser privileges meeted\e[0m"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;31mUsage: <span class="variable">$0</span> &lt;organization&gt; &lt;number&gt;\e[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;33mOption:\e[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;33m    Organization   for example, Gateway or Access\e[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;33m    number         [1, 9999] number of certification(s) \</span></span><br><span class="line"><span class="string">generated in batch\e[0m"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">introduction</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;33m====================================================\e[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;33mFunction: Issue Certification.\e[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;33mSupported OS: CentOS 6.8\e[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;33m====================================================\e[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 2 ]; <span class="keyword">then</span></span><br><span class="line">    usage</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$2</span>|grep <span class="string">"^[1-9][0-9]\&#123;0,3\&#125;$"</span> &gt; /dev/null</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">        usage</span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">"\e[1;31m[ERROR] ARGUMENT INVALID\e[0m"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">validate_superuser</span><br><span class="line"></span><br><span class="line">introduction</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -e /etc/pki/CA/cacert.pem ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] start to issue certification\e[0m"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">OS=`cat /etc/redhat-release | awk <span class="string">'&#123;print $1 " " $3&#125;'</span>`</span><br><span class="line">SupportedOS=<span class="string">"CentOS 6.8"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$OS</span>"</span>x = <span class="string">"<span class="variable">$SupportedOS</span>"</span>x ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;32m[Passed] OS: <span class="variable">$OS</span>\e[0m"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;31m[Failed] <span class="variable">$SupportedOS</span> supported only\e[0m"</span></span><br><span class="line">    <span class="built_in">exit</span> 1;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install openssl</span></span><br><span class="line">Found=`openssl version | grep <span class="string">"command not found"</span>`</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$Found</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] openssl installed\e[0m"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] install openssl\e[0m"</span></span><br><span class="line">    yum install openssl -y &gt; /dev/null</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">mkdir -p cert</span><br><span class="line">rm -rf cert/*</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((count=1; count &lt;= <span class="variable">$2</span>; ++ count))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] generate <span class="variable">$1</span>'s private key\e[0m"</span></span><br><span class="line">(<span class="built_in">umask</span> 077;openssl genrsa -out ./cert/<span class="variable">$1</span>\.key 2048)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] generate <span class="variable">$1</span>'s Cert\e[0m"</span></span><br><span class="line">cat /etc/pki/CA/index.txt &gt;&gt; /etc/pki/CA/index.txt.bak</span><br><span class="line">cat /dev/null &gt; /etc/pki/CA/index.txt</span><br><span class="line"></span><br><span class="line">cat &gt; gen_cert.exp &lt;&lt; EOF</span><br><span class="line"><span class="comment">#!/usr/bin/expect -f</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> timeout 30</span><br><span class="line"></span><br><span class="line">spawn openssl req -new -key ./cert/<span class="variable">$1</span>\.key -out ./cert/<span class="variable">$1</span>\.csr</span><br><span class="line"></span><br><span class="line">expect &#123;</span><br><span class="line">    <span class="string">"Country Name (2 letter code)"</span> &#123;</span><br><span class="line">        send <span class="string">"cn\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"State or Province Name (full name)"</span> &#123;</span><br><span class="line">        send <span class="string">"Guang Dong\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"Locality Name (eg, city)"</span> &#123;</span><br><span class="line">        send <span class="string">"Shen Zhen\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"Organization Name (eg, company)"</span> &#123;</span><br><span class="line">        send <span class="string">"xxx Tech Ltd.\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"Organizational Unit Name (eg, section)"</span> &#123;</span><br><span class="line">        send <span class="string">"<span class="variable">$1</span>\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"Common Name (eg, your name or your server's hostname)"</span> &#123;</span><br><span class="line">        send <span class="string">"xxx.cn\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"Email Address"</span> &#123;</span><br><span class="line">        send <span class="string">"cloud@xxx.cn\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"A challenge password"</span> &#123;</span><br><span class="line">        send <span class="string">"xxx666!\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"An optional company name"</span> &#123;</span><br><span class="line">        send <span class="string">"XXX Tech Ltd.\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod +x gen_cert.exp</span><br><span class="line">./gen_cert.exp</span><br><span class="line"></span><br><span class="line"><span class="comment"># sign certification</span></span><br><span class="line">cat &gt; sign_cert.exp &lt;&lt; EOF</span><br><span class="line"><span class="comment">#!/usr/bin/expect -f</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> timeout 30</span><br><span class="line"></span><br><span class="line">spawn openssl ca -<span class="keyword">in</span> ./cert/<span class="variable">$1</span>\.csr -out ./cert/<span class="variable">$1</span>\.crt -days 3655</span><br><span class="line"></span><br><span class="line">expect &#123;</span><br><span class="line">    <span class="string">"Sign the certificate"</span> &#123;</span><br><span class="line">        send <span class="string">"y\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="string">"1 out of 1 certificate requests certified, commit"</span> &#123;</span><br><span class="line">        send <span class="string">"y\r"</span>;</span><br><span class="line">        exp_continue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod +x sign_cert.exp</span><br><span class="line">./sign_cert.exp</span><br><span class="line"></span><br><span class="line">(<span class="built_in">umask</span> 077;touch ./cert/<span class="variable">$1</span>\.pem)</span><br><span class="line">cat ./cert/<span class="variable">$1</span>\.crt &gt;&gt; ./cert/<span class="variable">$1</span>\.pem</span><br><span class="line">cat ./cert/<span class="variable">$1</span>\.key &gt;&gt; ./cert/<span class="variable">$1</span>\.pem</span><br><span class="line">openssl rsa -<span class="keyword">in</span> ./cert/<span class="variable">$1</span>\.pem -pubout -out ./cert/<span class="variable">$1</span>\.pub</span><br><span class="line"></span><br><span class="line"><span class="comment"># rename</span></span><br><span class="line"><span class="built_in">cd</span> cert &gt; /dev/null</span><br><span class="line">rm -rf <span class="variable">$1</span>\.csr</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls <span class="variable">$1</span>\.*`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    mv <span class="variable">$file</span> `<span class="built_in">echo</span> <span class="string">"<span class="variable">$count</span>-<span class="variable">$file</span>"</span> `</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">cd</span> - &gt; /dev/null</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">rm -rf gen_cert.exp</span><br><span class="line">rm -rf sign_cert.exp</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] Total: <span class="variable">$2</span> certification(s).\e[0m"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] Output Directory: ./cert\e[0m"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m[INFO] Congratulations! Everything is done.\e[0m"</span></span><br></pre></td></tr></table></figure>

<h2 id="sudo-保存-vim-打开的文件"><a href="#sudo-保存-vim-打开的文件" class="headerlink" title="sudo 保存 vim 打开的文件"></a>sudo 保存 vim 打开的文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">:w !sudo sh -c <span class="string">"cat &gt;'%'"</span></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">:w !sudo tee <span class="string">"%"</span></span><br></pre></td></tr></table></figure>

<h2 id="拷贝并忽略特定的文件"><a href="#拷贝并忽略特定的文件" class="headerlink" title="拷贝并忽略特定的文件"></a>拷贝并忽略特定的文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp `ls|grep -v dummy.txt|xargs` target_dir</span><br></pre></td></tr></table></figure>

<h2 id="统计文件数目"><a href="#统计文件数目" class="headerlink" title="统计文件数目"></a>统计文件数目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计普通文件数目，不包括隐藏文件(即，以'.'开头的文件)</span></span><br><span class="line">ls -l|grep <span class="string">"^-"</span>|wc -l</span><br><span class="line">find . -maxdepth 1 -<span class="built_in">type</span> f|grep  -v <span class="string">"\./\."</span>|wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计普通文件数目，包括隐藏文件</span></span><br><span class="line">ls -al|grep <span class="string">"^"</span>|wc -l</span><br><span class="line">find . -maxdepth 1 -<span class="built_in">type</span> f|wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目录数目</span></span><br><span class="line">ls -l|grep <span class="string">"^d"</span>|wc -l</span><br><span class="line">find . -maxdepth 1 -<span class="built_in">type</span> f|grep  -v <span class="string">"\./\."</span>|wc -l</span><br></pre></td></tr></table></figure>

<h2 id="shell-实现多进程"><a href="#shell-实现多进程" class="headerlink" title="shell 实现多进程"></a>shell 实现多进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 命令加'&amp;'后台运行</span></span><br><span class="line">cmd1 &amp;</span><br><span class="line">cmd2 &amp;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">cmdN&amp;</span><br><span class="line"><span class="comment"># 必须加上，否则脚本执行完毕导致所以进程被结束</span></span><br><span class="line"><span class="built_in">wait</span></span><br></pre></td></tr></table></figure>

<h2 id="expect-自动登陆"><a href="#expect-自动登陆" class="headerlink" title="expect 自动登陆"></a>expect 自动登陆</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/expect -f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 脚本运行参数：ip、root 用户密码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ip [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> password [lindex <span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> timeout 30000</span><br><span class="line"></span><br><span class="line">spawn ssh root@<span class="variable">$ip</span></span><br><span class="line">expect &#123;</span><br><span class="line">  <span class="string">"*yes/no"</span> &#123;</span><br><span class="line">    send <span class="string">"yes\r"</span>; </span><br><span class="line">    exp_continue</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="string">"*password:"</span> &#123; </span><br><span class="line">    send <span class="string">"<span class="variable">$password</span>\r"</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在目标机器执行任何命令，例如 echo</span></span><br><span class="line">send <span class="string">"echo hello\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">send <span class="string">"exit\r"</span></span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure>

<h2 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用$&#123;#str&#125;来获取字符串的长度</span></span><br><span class="line">[root@localhost ~]<span class="comment"># str="hello"</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $&#123;#str&#125;</span></span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 awk 的 length 方法来获取字符串的长度</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo hello|awk '&#123;print length($0)&#125;'</span></span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 awk 的 NF 项来获取字符串的长度</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo hello|awk -F '' '&#123;print NF&#125;'</span></span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 wc -L 来获取字符串的长度，详见 man wc</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo hello|wc -L</span></span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 wc -c 来获取字符串的长度</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo hello|wc -c</span></span><br><span class="line">6</span><br><span class="line"><span class="comment"># -n: 不统计换行符</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo -n hello|wc -c </span></span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 expr 的 length 方法来获取字符串的长度</span></span><br><span class="line">[root@localhost ~]<span class="comment"># str=hello</span></span><br><span class="line">[root@localhost ~]<span class="comment"># expr length $&#123;str&#125;</span></span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 expr 的 $str : ".*" 来获取字符串的长度</span></span><br><span class="line"><span class="comment"># 备注：.* 代表任意字符，即，用任意字符来匹配字符串 hello，结果能够匹配 5 个</span></span><br><span class="line">[root@localhost ~]<span class="comment"># str="hello"; expr $str : ".*"</span></span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h2 id="一键部署-zookeeper-kafka-集群"><a href="#一键部署-zookeeper-kafka-集群" class="headerlink" title="一键部署 zookeeper/kafka 集群"></a>一键部署 zookeeper/kafka 集群</h2><blockquote>
<p><strong>功能：</strong>部署 zookeeper/kafka 集群</p>
<p><strong>说明：</strong></p>
<ol>
<li><p>需要提前规划好 zookeeper/kafka 集群，并配置好 basic.info，详见 basic.info。</p>
</li>
<li><p>可以支持 zookeeper/kafka 单机或集群部署<br> 单机部署，配置信息参考 basic_example_standalone.info<br> 集群部署，配置信息参考 basic_example_cluster.info</p>
</li>
</ol>
<p><strong>使用步骤：</strong></p>
<ol>
<li>修改 install_zk_kafka.tar.gz 中 install_zookeeper.sh/install_kafka 中安装包的路径（建议从内网下载安装包，可搭建 ftp 或 http 服务器），重新生成 install_zk_kafka.tar.gz</li>
<li>将步骤 1 中生成的压缩包上传到  ftp 或 http 服务器</li>
<li>将 zk_kafka_deploy.tar.gz 拷贝到操作机器（操作机器能够访问集群中所有机器即可）</li>
<li>解压，修改 zk_kafka_deploy.sh 中 install_zk_kafka.tar.gz 的路径</li>
<li>修改集群配置信息 basic.info</li>
<li>执行脚本 ./zk_kafka_deploy.sh</li>
</ol>
<p><strong>download：</strong></p>
<ol>
<li>install_zk_kafka.tar.gz: <a href="https://dudebing99.github.io/Blog/archives/script/install_zk_kafka.tar.gz" target="_blank" rel="noopener">安装</a></li>
<li>zk_kafka_deploy.tar.gz: <a href="https://dudebing99.github.io/Blog/archives/script/zk_kafka_deploy.tar.gz" target="_blank" rel="noopener">一键部署</a></li>
</ol>
</blockquote>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># name: zk_kafka_deploy.sh</span></span><br><span class="line"><span class="comment"># author: kevin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check root permission</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$UID</span> -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Superuser privileges are required to run this script."</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"e.g. \"sudo <span class="variable">$0</span>\""</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">zookeepers=`cat basic.info | grep zookeeper`</span><br><span class="line">zookeepers=`<span class="built_in">echo</span> <span class="variable">$&#123;zookeepers#*=&#125;</span>`</span><br><span class="line"></span><br><span class="line">kafkas=`cat basic.info | grep kafka`</span><br><span class="line">kafkas=`<span class="built_in">echo</span> <span class="variable">$&#123;kafkas#*=&#125;</span>`</span><br><span class="line"></span><br><span class="line">password=`cat basic.info | grep cluster_common_passwd`</span><br><span class="line">password=`<span class="built_in">echo</span> <span class="variable">$&#123;password#*=&#125;</span>`</span><br><span class="line"></span><br><span class="line">zookeeper_array=(<span class="variable">$zookeepers</span>)</span><br><span class="line">kafka_array=(<span class="variable">$kafkas</span>)</span><br><span class="line">zookeeper_num=<span class="variable">$&#123;#zookeeper_array[@]&#125;</span></span><br><span class="line">kafka_num=<span class="variable">$&#123;#kafka_array[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 校验 IP 是否有效</span></span><br><span class="line">CheckIPAddr()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"># IP地址必须为全数字</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span>|grep <span class="string">"^[0-9]\&#123;1,3\&#125;\.\([0-9]\&#123;1,3\&#125;\.\)\&#123;2\&#125;[0-9]\&#123;1,3\&#125;$"</span> &gt; /dev/null</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    ipaddr=<span class="variable">$1</span></span><br><span class="line">    a=`<span class="built_in">echo</span> <span class="variable">$ipaddr</span> | awk -F . <span class="string">'&#123;print $1&#125;'</span>`  <span class="comment"># 以"."分隔，取出每个列的值</span></span><br><span class="line">    b=`<span class="built_in">echo</span> <span class="variable">$ipaddr</span> | awk -F . <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">    c=`<span class="built_in">echo</span> <span class="variable">$ipaddr</span> | awk -F . <span class="string">'&#123;print $3&#125;'</span>`</span><br><span class="line">    d=`<span class="built_in">echo</span> <span class="variable">$ipaddr</span> | awk -F . <span class="string">'&#123;print $4&#125;'</span>`</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="variable">$a</span> <span class="variable">$b</span> <span class="variable">$c</span> <span class="variable">$d</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$num</span> -gt 255 ] || [ <span class="variable">$num</span> -lt 0 ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">return</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$zookeeper_num</span> -eq 0 -o <span class="variable">$kafka_num</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ERROR: cluster info invalid"</span></span><br><span class="line">    <span class="built_in">exit</span> 1;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> zk <span class="keyword">in</span> <span class="variable">$zookeepers</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    CheckIPAddr <span class="variable">$zk</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"ERROR: ip addr [<span class="variable">$zk</span>] invalid"</span></span><br><span class="line">        <span class="built_in">exit</span> 1;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> kafka <span class="keyword">in</span> <span class="variable">$kafkas</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    CheckIPAddr <span class="variable">$kafka</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"ERROR: ip addr [<span class="variable">$kafka</span>] invalid"</span></span><br><span class="line">        <span class="built_in">exit</span> 1;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">cat &gt; gen_rsa_pub.exp &lt;&lt; EOF</span><br><span class="line"><span class="comment">#!/usr/bin/expect -f</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ip [lindex \<span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> password [lindex \<span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> timeout 30</span><br><span class="line"></span><br><span class="line">spawn ssh root@\<span class="variable">$ip</span></span><br><span class="line">expect &#123;</span><br><span class="line">  <span class="string">"*yes/no"</span> &#123;</span><br><span class="line">    send <span class="string">"yes\r"</span>;</span><br><span class="line">    exp_continue</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">"*password:"</span> &#123;</span><br><span class="line">    send <span class="string">"\$password\r"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"yum install expect -y\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"curl -O ftp://192.168.2.2/pub/install_zk_kafka.tar.gz\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"tar -xzvf install_zk_kafka.tar.gz\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"cd install_zk_kafka\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"./gen_rsa_pub.sh\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"cd ~\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"rm -rf install_zk_kafka*\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"exit\r"</span></span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; scp_rsa_pub.exp &lt;&lt; EOF</span><br><span class="line"><span class="comment">#!/usr/bin/expect -f</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ip [lindex \<span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> password [lindex \<span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> timeout 30</span><br><span class="line"></span><br><span class="line">spawn scp root@\<span class="variable">$ip</span>:~/.ssh/id_rsa.pub .</span><br><span class="line">expect &#123;</span><br><span class="line">  <span class="string">"*yes/no"</span> &#123;</span><br><span class="line">    send <span class="string">"yes\r"</span>;</span><br><span class="line">    exp_continue</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">"*password:"</span> &#123;</span><br><span class="line">    send <span class="string">"\$password\r"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">send <span class="string">"exit\r"</span></span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; write_rsa_pubs.exp &lt;&lt; EOF</span><br><span class="line"><span class="comment">#!/usr/bin/expect -f</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ip [lindex \<span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> password [lindex \<span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> timeout 30</span><br><span class="line"></span><br><span class="line">spawn scp zk_id_rsa.pub root@\<span class="variable">$ip</span>:~</span><br><span class="line">expect &#123;</span><br><span class="line">  <span class="string">"*yes/no"</span> &#123;</span><br><span class="line">    send <span class="string">"yes\r"</span>;</span><br><span class="line">    exp_continue</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">"*password:"</span> &#123;</span><br><span class="line">    send <span class="string">"\$password\r"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">send <span class="string">"exit\r"</span></span><br><span class="line">expect eof</span><br><span class="line"></span><br><span class="line">spawn ssh root@\<span class="variable">$ip</span></span><br><span class="line">expect &#123;</span><br><span class="line">  <span class="string">"*yes/no"</span> &#123;</span><br><span class="line">    send <span class="string">"yes\r"</span>;</span><br><span class="line">    exp_continue</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">"*password:"</span> &#123;</span><br><span class="line">    send <span class="string">"\$password\r"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line">send <span class="string">"cat ~/zk_id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\r"</span></span><br><span class="line"></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line">send <span class="string">"rm -rf ~/zk_id_rsa.pub\r"</span></span><br><span class="line"></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line">send <span class="string">"exit\r"</span></span><br><span class="line"></span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$zookeeper_num</span> -gt 1 ]; <span class="keyword">then</span></span><br><span class="line">    cat /dev/null &gt; zk_id_rsa.pub</span><br><span class="line">    chmod +x gen_rsa_pub.exp</span><br><span class="line">    chmod +x scp_rsa_pub.exp</span><br><span class="line">    chmod +x write_rsa_pubs.exp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> zk <span class="keyword">in</span> <span class="variable">$zookeepers</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        ./gen_rsa_pub.exp <span class="variable">$zk</span> <span class="variable">$password</span></span><br><span class="line">        ./scp_rsa_pub.exp <span class="variable">$zk</span> <span class="variable">$password</span></span><br><span class="line">        cat id_rsa.pub &gt;&gt; zk_id_rsa.pub</span><br><span class="line">        rm -rf id_rsa.pub</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> zk <span class="keyword">in</span> <span class="variable">$zookeepers</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        ./write_rsa_pubs.exp <span class="variable">$zk</span> <span class="variable">$password</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    rm -rf zk_id_rsa.pub</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    rm -rf gen_rsa_pub.exp</span><br><span class="line">    rm -rf scp_rsa_pub.exp</span><br><span class="line">    rm -rf write_rsa_pubs.exp</span><br><span class="line"></span><br><span class="line">cat &gt; install_zookeeper.exp &lt;&lt; EOF</span><br><span class="line"><span class="comment">#!/usr/bin/expect -f</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ip [lindex \<span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> password [lindex \<span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> zookeepers [lindex \<span class="variable">$argv</span> 2]</span><br><span class="line"><span class="built_in">set</span> id [lindex \<span class="variable">$argv</span> 3]</span><br><span class="line"><span class="built_in">set</span> timeout 600</span><br><span class="line"></span><br><span class="line">spawn ssh root@\<span class="variable">$ip</span></span><br><span class="line">expect &#123;</span><br><span class="line">  <span class="string">"*yes/no"</span> &#123;</span><br><span class="line">    send <span class="string">"yes\r"</span>;</span><br><span class="line">    exp_continue</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">"*password:"</span> &#123;</span><br><span class="line">    send <span class="string">"\$password\r"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"curl -O ftp://192.168.2.2/pub/install_zk_kafka.tar.gz\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"tar -xzvf install_zk_kafka.tar.gz\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"cd install_zk_kafka\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"./install_zookeeper.sh \$zookeepers \$id\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"cd ~\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"rm -rf install_zk_kafka*\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"exit\r"</span></span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod +x install_zookeeper.exp</span><br><span class="line"></span><br><span class="line">id=0</span><br><span class="line"><span class="keyword">for</span> zk <span class="keyword">in</span> <span class="variable">$zookeepers</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># in order to avoid info expired when the machine is rebuild</span></span><br><span class="line">    sed -i <span class="string">"/<span class="variable">$ip</span>/d"</span> ~/.ssh/known_hosts &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">    ./install_zookeeper.exp <span class="variable">$zk</span> <span class="variable">$password</span> <span class="string">"'<span class="variable">$zookeepers</span>'"</span> <span class="variable">$id</span></span><br><span class="line">    id=`expr <span class="variable">$id</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">rm -rf install_zookeeper.exp</span><br><span class="line"></span><br><span class="line">zookeeper_connect=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> zk <span class="keyword">in</span> <span class="variable">$zookeepers</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    zookeeper_connect=<span class="variable">$&#123;zookeeper_connect&#125;</span><span class="variable">$&#123;zk&#125;</span><span class="string">":2181,"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">zookeeper_connect=<span class="variable">$&#123;zookeeper_connect%,*&#125;</span></span><br><span class="line"></span><br><span class="line">cat &gt; install_kafka.exp &lt;&lt; EOF</span><br><span class="line"><span class="comment">#!/usr/bin/expect -f</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ip [lindex \<span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> password [lindex \<span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> broker_id [lindex \<span class="variable">$argv</span> 2]</span><br><span class="line"><span class="built_in">set</span> zookeeper_connect [lindex \<span class="variable">$argv</span> 3]</span><br><span class="line"><span class="built_in">set</span> timeout 600</span><br><span class="line"></span><br><span class="line">spawn ssh root@\<span class="variable">$ip</span></span><br><span class="line">expect &#123;</span><br><span class="line">  <span class="string">"*yes/no"</span> &#123;</span><br><span class="line">    send <span class="string">"yes\r"</span>;</span><br><span class="line">    exp_continue</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">"*password:"</span> &#123;</span><br><span class="line">    send <span class="string">"\$password\r"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"curl -O ftp://192.168.2.2/pub/install_zk_kafka.tar.gz\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"tar -xzvf install_zk_kafka.tar.gz\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"cd install_zk_kafka\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"./install_kafka.sh \$broker_id \$ip \$zookeeper_connect\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"cd ~\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"rm -rf install_zk_kafka*\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"></span><br><span class="line">send <span class="string">"exit\r"</span></span><br><span class="line">expect eof</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod +x install_kafka.exp</span><br><span class="line"></span><br><span class="line">id=0</span><br><span class="line"><span class="keyword">for</span> kafka <span class="keyword">in</span> <span class="variable">$kafkas</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># in order to avoid info expired when the machine is rebuild</span></span><br><span class="line">    sed -i <span class="string">"/<span class="variable">$ip</span>/d"</span> ~/.ssh/known_hosts &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">    ./install_kafka.exp <span class="variable">$kafka</span> <span class="variable">$password</span> <span class="variable">$id</span> <span class="variable">$zookeeper_connect</span></span><br><span class="line">    id=`expr <span class="variable">$id</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">rm -rf install_kafka.exp</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure>

<h3 id="集群配置信息"><a href="#集群配置信息" class="headerlink" title="集群配置信息"></a>集群配置信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此文件只能修改 value，不能修改 key</span></span><br><span class="line"><span class="comment"># 即，只能修改等号右边的值，根据实际集群信息修改</span></span><br><span class="line">zookeeper=192.168.2.3 192.168.2.4 192.168.2.5</span><br><span class="line">kafka=192.168.2.3 192.168.2.4 192.168.2.5</span><br><span class="line">cluster_common_passwd=123456</span><br></pre></td></tr></table></figure>

<h2 id="添加自定义系统服务"><a href="#添加自定义系统服务" class="headerlink" title="添加自定义系统服务"></a>添加自定义系统服务</h2><blockquote>
<p>备注：源码编译安装 Apache Tomcat 之后，可以将其添加到系统服务<strong>（此方法仅适用于 CentOS 7 之前版本）</strong></p>
</blockquote>
<ol>
<li><p>进入 /etc/ini.d 文件夹，新建文件 tomcat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># 2345是要设为要启动的运行级别，10启动优先级，90杀死进程的优先级</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 10 90 </span></span><br><span class="line"><span class="comment"># description: script to start/stop tomcat service </span></span><br><span class="line"><span class="comment"># by dudebing99 2014-10-28 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile </span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#start service </span></span><br><span class="line">start) </span><br><span class="line">sh /usr/share/apache-tomcat-7.0.56/bin/startup.sh </span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span> </span><br><span class="line">;; </span><br><span class="line"></span><br><span class="line"><span class="comment">#stop service </span></span><br><span class="line">stop) </span><br><span class="line">sh /usr/share/apache-tomcat-7.0.56/bin/shutdown.sh </span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span> </span><br><span class="line">;; </span><br><span class="line"></span><br><span class="line"><span class="comment">#restart service </span></span><br><span class="line">restart) </span><br><span class="line">sh /usr/share/apache-tomcat-7.0.56/bin/shutdown.sh </span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span> </span><br><span class="line"><span class="comment">#status </span></span><br><span class="line">status) </span><br><span class="line">var=$(ps -ef | grep tomcat | grep -v <span class="string">"grep"</span> | wc -l) </span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$var</span> -eq 4 ]] ; <span class="keyword">then</span> </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\nTomcat is running.\n"</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\nTomcat is stopped.\n"</span> </span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line">;;</span><br><span class="line"><span class="comment">#help </span></span><br><span class="line"><span class="built_in">help</span>) </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\nUsage:start|stop|restart|status\n"</span></span><br><span class="line">;; </span><br><span class="line"></span><br><span class="line"><span class="comment">#other </span></span><br><span class="line">*) </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\nUnexpected command, tips as follows.\n"</span> </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"Usage:start|stop|restart|status\n"</span> </span><br><span class="line">;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>更改文件权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 755  /etc/init.d/tomcat</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig --add tomcat</span><br></pre></td></tr></table></figure>
</li>
<li><p>确认服务是否已开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig tomcat --list</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="awk-转义单引号、双引号"><a href="#awk-转义单引号、双引号" class="headerlink" title="awk 转义单引号、双引号"></a>awk 转义单引号、双引号</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转义双引号，直接使用 \" 即可</span></span><br><span class="line">[kevin@www mass]$ cat aaa </span><br><span class="line">1   Q. Ngai</span><br><span class="line">2   T. Hoa</span><br><span class="line">3   T. Ninh</span><br><span class="line">4   D. Nai</span><br><span class="line">[kevin@www mass]$ cat aaa |awk <span class="string">'&#123;print "&#123;id: "$1", name: \"" $2" "$3"\"&#125;"&#125;'</span></span><br><span class="line">&#123;id: 1, name: <span class="string">"Q. Ngai"</span>&#125;</span><br><span class="line">&#123;id: 2, name: <span class="string">"T. Hoa"</span>&#125;</span><br><span class="line">&#123;id: 3, name: <span class="string">"T. Ninh"</span>&#125;</span><br><span class="line">&#123;id: 4, name: <span class="string">"D. Nai"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义单引号，使用 '\''</span></span><br><span class="line">[kevin@www mass]$ cat aaa </span><br><span class="line">1   Q. Ngai</span><br><span class="line">2   T. Hoa</span><br><span class="line">3   T. Ninh</span><br><span class="line">4   D. Nai</span><br><span class="line">[kevin@www mass]$ cat aaa |awk <span class="string">'&#123;print "&#123;id: "$1", name: '</span>\<span class="string">''</span><span class="string">" <span class="variable">$2</span>"</span> <span class="string">"<span class="variable">$3</span>"</span><span class="string">'\'</span><span class="string">'&#125;"&#125;'</span></span><br><span class="line">&#123;id: 1, name: <span class="string">'Q. Ngai'</span>&#125;</span><br><span class="line">&#123;id: 2, name: <span class="string">'T. Hoa'</span>&#125;</span><br><span class="line">&#123;id: 3, name: <span class="string">'T. Ninh'</span>&#125;</span><br><span class="line">&#123;id: 4, name: <span class="string">'D. Nai'</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="cp-拷贝同一个文件到多个目录"><a href="#cp-拷贝同一个文件到多个目录" class="headerlink" title="cp 拷贝同一个文件到多个目录"></a>cp 拷贝同一个文件到多个目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拷贝 dummy.txt 到目录 /tmp/1 和 /tmp/2</span></span><br><span class="line"><span class="comment"># -n 1 每次传递 1 个参数给 xargs</span></span><br><span class="line"><span class="built_in">echo</span> /tmp/1 /tmp/2|xargs -n 1 cp dummy.txt</span><br></pre></td></tr></table></figure>

<h2 id="cp-同时拷贝多个文件到同一个目录"><a href="#cp-同时拷贝多个文件到同一个目录" class="headerlink" title="cp 同时拷贝多个文件到同一个目录"></a>cp 同时拷贝多个文件到同一个目录</h2><ul>
<li>拷贝多个文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ls /tmp/dummy/                      </span></span><br><span class="line">file1  file2  file3  file5</span><br><span class="line">[root@localhost ~]<span class="comment"># cp /tmp/dummy/&#123;file1,file5&#125; destdir/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls destdir/</span></span><br><span class="line">file1  file5</span><br></pre></td></tr></table></figure>

<ul>
<li>文件名有共同前缀</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ls destdir/                      </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls /tmp/dummy/</span></span><br><span class="line">file1  file2  file3  file5</span><br><span class="line">[root@localhost ~]<span class="comment"># cp /tmp/dummy/file&#123;1..3&#125; destdir/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls destdir/</span></span><br><span class="line">file1  file2  file3</span><br></pre></td></tr></table></figure>

<h2 id="xxd-十六进制转换"><a href="#xxd-十六进制转换" class="headerlink" title="xxd 十六进制转换"></a>xxd 十六进制转换</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kevin@ubuntu:~$ <span class="built_in">echo</span> <span class="string">"hello world"</span>|xxd -ps</span><br><span class="line">68656c6c6f20776f726c640a</span><br><span class="line">kevin@ubuntu:~$ <span class="built_in">echo</span> <span class="string">"hello world"</span>|xxd -ps -u</span><br><span class="line">68656C6C6F20776F726C640A</span><br></pre></td></tr></table></figure>

<h2 id="chattr-和-lsattr-保护文件"><a href="#chattr-和-lsattr-保护文件" class="headerlink" title="chattr 和 lsattr 保护文件"></a>chattr 和 lsattr 保护文件</h2><blockquote>
<p>通常，可以通过 <code>chattr +i</code> 实现对文件的保护</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@iZbp18qlevqaoff8jmlpx7Z:~<span class="comment"># lsattr stack.log </span></span><br><span class="line">-------------e-- stack.log</span><br><span class="line"><span class="comment"># 通过 chattr +i 给文件添加 "i" 属性，文件将不能被删除、改名、设定连结也无法写入或新增数据</span></span><br><span class="line">root@iZbp18qlevqaoff8jmlpx7Z:~<span class="comment"># chattr +i stack.log </span></span><br><span class="line">root@iZbp18qlevqaoff8jmlpx7Z:~<span class="comment"># lsattr stack.log    </span></span><br><span class="line">----i--------e-- stack.log</span><br><span class="line"><span class="comment"># 写入数据出错</span></span><br><span class="line">root@iZbp18qlevqaoff8jmlpx7Z:~<span class="comment"># echo "a" &gt;&gt; stack.log</span></span><br><span class="line">-bash: stack.log: Permission denied</span><br><span class="line"><span class="comment"># 去掉 "i" 属性</span></span><br><span class="line">root@iZbp18qlevqaoff8jmlpx7Z:~<span class="comment"># chattr -i stack.log</span></span><br><span class="line">root@iZbp18qlevqaoff8jmlpx7Z:~<span class="comment"># echo "a" &gt;&gt; stack.log</span></span><br></pre></td></tr></table></figure>

<h2 id="md5sum-校验文件完整性"><a href="#md5sum-校验文件完整性" class="headerlink" title="md5sum 校验文件完整性"></a>md5sum 校验文件完整性</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成 md5sum</span></span><br><span class="line">root@iZwz9b1eyn1aqqy0s3qbadZ:~/paychain<span class="comment"># md5sum coind</span></span><br><span class="line">91cc995a9406262bc70794c00042e69e  coind</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 md5sum 写入文件</span></span><br><span class="line">root@iZwz9b1eyn1aqqy0s3qbadZ:~/paychain<span class="comment"># md5sum coind &gt; coind.md5</span></span><br><span class="line">root@iZwz9b1eyn1aqqy0s3qbadZ:~/paychain<span class="comment"># cat coind.md5 </span></span><br><span class="line">91cc995a9406262bc70794c00042e69e  coind</span><br><span class="line"></span><br><span class="line"><span class="comment"># 校验文件完整性，OK 即为完整</span></span><br><span class="line">root@iZwz9b1eyn1aqqy0s3qbadZ:~/paychain<span class="comment"># md5sum -c coind.md5 </span></span><br><span class="line">coind: OK</span><br></pre></td></tr></table></figure>

<h2 id="获取子脚本的返回值"><a href="#获取子脚本的返回值" class="headerlink" title="获取子脚本的返回值"></a>获取子脚本的返回值</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat ./a.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">i=99</span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$i</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat ./a.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">i=99</span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$i</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./b.sh</span></span><br><span class="line">ret: 99</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Shell</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MD Temp</title>
    <url>/2019/11/12/temp/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line"></span><br><span class="line">categories:</span><br><span class="line">/* 分类，支持多级，比如：</span><br><span class="line">- technology</span><br><span class="line">- computer</span><br><span class="line">- computer-aided-art</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">tags:</span><br><span class="line">/* 标签</span><br><span class="line">** 多个可以这样写</span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">- 标签3</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">description:</span><br><span class="line">/* 文章的描述，在每篇文章标题下方显示</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">comments:</span><br><span class="line">/* 是否开启评论</span><br><span class="line">** 默认值是 true</span><br><span class="line">** 要关闭写 false</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">photos:</span><br><span class="line">/* Gallery support，用来支持画廊 / 相册，用法如下：</span><br><span class="line">- photo_url_1</span><br><span class="line">- photo_url_2</span><br><span class="line">- photo_url_3</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">link:</span><br><span class="line">/* 文章的外部链接</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">top: true</span><br><span class="line">/* 文章置顶</span><br><span class="line">** true就是开启，flase就是关闭置顶。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">password:</span><br><span class="line">/* 文章密码，参考本文&quot;1.20.文章加密访问&quot;</span><br><span class="line">** 需配置好，否则请勿添加！</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>外转京步骤详解</title>
    <url>/2019/11/12/%E5%A4%96%E8%BD%AC%E4%BA%AC%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="外转京步骤详解"><a href="#外转京步骤详解" class="headerlink" title="外转京步骤详解"></a>外转京步骤详解</h1><h2 id="步骤一：外地"><a href="#步骤一：外地" class="headerlink" title="步骤一：外地"></a>步骤一：外地</h2><hr>
<p>###1.1.携带证件</p>
<blockquote>
<p>带原、现车主和代办人身份证（如果有代办人的话），车辆行驶证、大绿本、原车发票、交强险（打印件即可，一份）、北京指标打印件一份、发动机和车架号拓号（这两个可以不带，主要车检是要能看见这两个号并且可以现场免费拓号，大同是这样的，不知道河北是否是这样）。</p>
<p><strong><em>说句实在话，把跟车有关东西全带上，总共也没多少东西！</em></strong></p>
</blockquote>
<p>###1.2.车辆交易</p>
<blockquote>
<p>找车管所附近的二手车交易市场（车管所附近有不少），去按流程办理过户，过户费用大概100到200吧大概，依据车排量、二手车交易开票额、进口国产等区别有差异，但是不会太大。这一步主要是取得“车辆交易单”，名字可能不太对，反正就是这个意思，交易市场问你多少钱，你就随便报就行，就是你车的交易额（虚假模拟交易二手车价格）。</p>
</blockquote>
<p>###1.3.车检</p>
<blockquote>
<p>1.3.1.取得二手车交易单后，带着单子去最近的车管所进行验车，这里需要提前找好当地车管所的车检单，一般车管所就有，可以提前准备，应该去当地车管所网站就可以下载，如果找不到，去找当地的车管所大厅找就行。</p>
<p>1.3.2.摘牌，把河北的拍照摘了，比较难弄，一般需要一字改锥+钳子+锤子才能弄下来，比较费劲，但是车管所有人有工人帮你弄，一般收费20。拍照取消来后，找车管所附近的修理厂或者打印的，帮你拍照，贴车检单上的，似乎是前后两张，斜45度的那种照片，就是类似于行驶本上的那种照片。</p>
<p><strong><em>这里需要注意，如果你河北拍照当时是找人办的，人车都没有去，有可能车管所没有你车辆的电子档案，那么车管所交警是不会给你办车检的，你需要找你办理车牌的黄牛，找当地的当时给你办理车牌的交警给你办理车检，一般都是加盟车检所，非政府机构的，这个一定要注意，不然会耽误你很长时间</em></strong></p>
<p>1.3.3.摘牌、拍照、车检单都弄好了，排队车检。</p>
</blockquote>
<p>###1.4.车辆提档</p>
<blockquote>
<p>车检完成后，拿上二手车交易市场给开的材料去车管所对档，上缴原来的车牌，到了车管所取号等待叫号，提交材料进行对档，时间比较久。对档后回来完成过户所有流程，然后就可以去车管所提档。办理过程中会让你申领临时号牌，好像是50块钱。提档后可以自己带走，也可以邮寄，看车管所规定。建议自己带回，这样回来后随时都可以去车管所做北京的步骤了。</p>
</blockquote>
<h2 id="步骤二：北京"><a href="#步骤二：北京" class="headerlink" title="步骤二：北京"></a>步骤二：北京</h2><hr>
<h3 id="2-1-车检"><a href="#2-1-车检" class="headerlink" title="2.1.车检"></a>2.1.车检</h3><blockquote>
<p>首先，上牌不要去车管所，要去机动车检测厂，盛华、京顺、7421、学院路、岳各庄、京北等等都可以，盛华和京顺都需要预约，人多车多，价格可能略高，京顺需要下载云车检APP，网上预约，每天0点预约，基本上约不到。这些都是听说的，我是去的盛华，人很多，我早晨6点半就到了，折腾到下午4点才弄完，中间遇到了很多波折。听说京顺很快，但是不知道是不是真的。</p>
<p>2.1.1.尾气检验，如果是去盛华，他们是8点上班，一般7点多就排了很多人，不要直接去车检，你需要先去做尾气检验，先去西院环保服务大厅26号窗口提交档案和大绿本，然后复印大绿本等材料，然后去外面排队检测，验尾气要花400还是500，主要是取得环保标，一个蓝色的方形标。取得环保标之后，然后去东院进行车检。</p>
<p>2.1.2.车检，如果时间还可以，可以把车停好，去东院看看，外转京车道人多不多，上午十一点半下班，下午一点半才上班，五点下班。如果排队人比较多，可以选择放弃，明天起大早来，七点之前到，注意一定要排外转京车道。最左侧车道是新能源车道，然后是京转外，然后是外转京，然后是新车，好像是这个顺序。然后车检即可。</p>
<p>2.1.3.在排队的过程中,你可以让朋友或者跟你一起去的另一个人拿着西院那边给到你的一个带条形码的纸张到东院的大厅去缴费,一定要先缴费,否则排到你了你没缴费,白排了。</p>
<p>2.1.4.拓号、照相，这里照相是车管所给照，免费的，一般快排到你验车的时候，去大厅进门左侧那边找人帮你照相，照完后大概几分钟就能取。拓号，这里也是有专门的人帮你拓号，免费的，但是你需要提前将车架号位置和发动机号位置找出来，方便拓号。我的车发动机号就很麻烦，需要把车升起来然后拓号，4s店弄的，花了200块，提前准备好，如果你的车发动机号隐藏的比较深，建议提前去弄。不然检测场的人是不会帮你弄的。</p>
<p>2.1.5.车辆外观和贴膜，如果你的车辅外观有改装,乖乖的去把改装振掉吧。前排车床贴膜要留出反光镜那个角，叫45度角吧。如果是前车窗都给贴膜了，直接死掉吧。然后是车上贴纸，如果很大也死掉吧。</p>
<p>2.1.6.先是OBD检测,就是一个机器播到方向盘下面的口上,检测通过后给你单子上盖章;然后是外观检测,小编的车辆由于改了大灯,无法通过,注意,他们查的很严格,就连里面的灯泡都看的清清楚楚。</p>
<p>2.1.7.然后到检测场东院的大厅办理交验车单,然后根据窗口的提示一步步到下一个窗口办理新车档案(其实就是给到你一个白色的档案封皮)。</p>
<p>2.1.8. 之后到京朝车管所,从盛华检测场东院大厅穿过去,过一条马路就是京朝车管所.6号窗口提交手续、包括大绿本、车辆封档档案、交强险保险单。（如果没有提前准备申请表,在大厅中间服务台填表,如果你是代办,要提交委托书)。这个过程可能需要你跟指标人进行视频通话，提前跟指标人打好招呼，避免尴尬的重排。</p>
<p>2.1.9.窗口提示一周后下午2点,到6号窗口办理选号。</p>
</blockquote>
<h3 id="2-2-提档"><a href="#2-2-提档" class="headerlink" title="2.2.提档"></a>2.2.提档</h3><blockquote>
<p>2.2.1.一周后，按照指定的时间去车管所6号窗口办理，拿着自己的档案和资料返回到盛华检测场，盛华检测场东院的大厅右手边尽头,拿着绿本和那张带有条形码的纸,到选号机器上扫一下条形码,然后选号。</p>
</blockquote>
<p>###2.3.选号</p>
<blockquote>
<p>2.3.1.拿着绿本和条形码的纸到旁边的窗口办理缴费,制作行驶本,拿北京的临牌以及车牌的卡扣,办理车牌邮寄等业务。</p>
</blockquote>
]]></content>
      <tags>
        <tag>京牌</tag>
      </tags>
  </entry>
</search>
